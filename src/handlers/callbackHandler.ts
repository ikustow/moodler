import { Telegraf } from 'telegraf';
import axios from 'axios';

export const handleCallbacks = (bot: Telegraf) => {
    bot.on('callback_query', async (ctx) => {
        const callbackQuery = ctx.callbackQuery;

        if ('data' in callbackQuery) {
            const userId = ctx.from?.id;
            let mood: string | undefined; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mood –∫–∞–∫ undefined

            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ mood –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback
            if (callbackQuery.data === 'mood_good') {
                mood = 'good';
            } else if (callbackQuery.data === 'mood_sad') {
                mood = 'sad';
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mood –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
            if (mood) {
                try {
                    const response = await axios.post('https://your-backend-api.com/mood', {
                        userId: userId,
                        mood: mood
                    });

                    if (response.status === 200) {
                        ctx.reply(`–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (${mood === 'good' ? 'üòä' : 'üò¢'}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!`);
                    }
                } catch (error) {
                    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            } else {
                ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.');
            }

            ctx.answerCbQuery();
        }
    });
};
